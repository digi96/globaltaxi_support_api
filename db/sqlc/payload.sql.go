// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: payload.sql

package db

import (
	"context"
	"time"
)

const createPayload = `-- name: CreatePayload :one
INSERT INTO payload(body, created_at)
VALUES ($1, $2)
RETURNING payload_id, body, status, created_at
`

type CreatePayloadParams struct {
	Body      string    `json:"body"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) CreatePayload(ctx context.Context, arg CreatePayloadParams) (Payload, error) {
	row := q.queryRow(ctx, q.createPayloadStmt, createPayload, arg.Body, arg.CreatedAt)
	var i Payload
	err := row.Scan(
		&i.PayloadID,
		&i.Body,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getPaylodById = `-- name: GetPaylodById :one
SELECT payload_id, body, status, created_at
FROM payload
WHERE payload_id = $1
LIMIT 1
`

func (q *Queries) GetPaylodById(ctx context.Context, payloadID int32) (Payload, error) {
	row := q.queryRow(ctx, q.getPaylodByIdStmt, getPaylodById, payloadID)
	var i Payload
	err := row.Scan(
		&i.PayloadID,
		&i.Body,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const listUndoPayloads = `-- name: ListUndoPayloads :many
SELECT payload_id, body, status, created_at
FROM payload
WHERE status = '0'
ORDER BY payload_id
LIMIT $1 OFFSET $2
`

type ListUndoPayloadsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUndoPayloads(ctx context.Context, arg ListUndoPayloadsParams) ([]Payload, error) {
	rows, err := q.query(ctx, q.listUndoPayloadsStmt, listUndoPayloads, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Payload{}
	for rows.Next() {
		var i Payload
		if err := rows.Scan(
			&i.PayloadID,
			&i.Body,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePayload = `-- name: UpdatePayload :one
UPDATE payload
SET status = '1'
WHERE payload_id = $1
RETURNING payload_id, body, status, created_at
`

func (q *Queries) UpdatePayload(ctx context.Context, payloadID int32) (Payload, error) {
	row := q.queryRow(ctx, q.updatePayloadStmt, updatePayload, payloadID)
	var i Payload
	err := row.Scan(
		&i.PayloadID,
		&i.Body,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
