// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: rideorder.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO rideorder(
    contact_id,
    rider_name,
    rider_phone,
    destination
  )
VALUES ($1, $2, $3, $4)
RETURNING rideorder_id, contact_id, rider_name, rider_phone, destination, pickup_at, created_at, updated_at
`

type CreateOrderParams struct {
	ContactID   uuid.UUID `json:"contact_id"`
	RiderName   string    `json:"rider_name"`
	RiderPhone  string    `json:"rider_phone"`
	Destination string    `json:"destination"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Rideorder, error) {
	row := q.queryRow(ctx, q.createOrderStmt, createOrder,
		arg.ContactID,
		arg.RiderName,
		arg.RiderPhone,
		arg.Destination,
	)
	var i Rideorder
	err := row.Scan(
		&i.RideorderID,
		&i.ContactID,
		&i.RiderName,
		&i.RiderPhone,
		&i.Destination,
		&i.PickupAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM rideorder
WHERE rideorder_id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, rideorderID int32) error {
	_, err := q.exec(ctx, q.deleteOrderStmt, deleteOrder, rideorderID)
	return err
}

const getOrderById = `-- name: GetOrderById :one
SELECT rideorder_id, contact_id, rider_name, rider_phone, destination, pickup_at, created_at, updated_at
FROM rideorder
WHERE rideorder_id = $1
LIMIT 1
`

func (q *Queries) GetOrderById(ctx context.Context, rideorderID int32) (Rideorder, error) {
	row := q.queryRow(ctx, q.getOrderByIdStmt, getOrderById, rideorderID)
	var i Rideorder
	err := row.Scan(
		&i.RideorderID,
		&i.ContactID,
		&i.RiderName,
		&i.RiderPhone,
		&i.Destination,
		&i.PickupAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listOrders = `-- name: ListOrders :many
SELECT rideorder_id, contact_id, rider_name, rider_phone, destination, pickup_at, created_at, updated_at
FROM rideorder
ORDER BY rideorder_id
LIMIT $1 OFFSET $2
`

type ListOrdersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOrders(ctx context.Context, arg ListOrdersParams) ([]Rideorder, error) {
	rows, err := q.query(ctx, q.listOrdersStmt, listOrders, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Rideorder{}
	for rows.Next() {
		var i Rideorder
		if err := rows.Scan(
			&i.RideorderID,
			&i.ContactID,
			&i.RiderName,
			&i.RiderPhone,
			&i.Destination,
			&i.PickupAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrder = `-- name: UpdateOrder :one
UPDATE rideorder
SET pickup_at = coalesce($1, pickup_at),
  updated_at = coalesce($2, updated_at)
WHERE rideorder_id = $3
RETURNING rideorder_id, contact_id, rider_name, rider_phone, destination, pickup_at, created_at, updated_at
`

type UpdateOrderParams struct {
	PickupAt     sql.NullTime `json:"pickup_at"`
	UpdatedAt    sql.NullTime `json:"updated_at"`
	RiderorderID int32        `json:"riderorder_id"`
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) (Rideorder, error) {
	row := q.queryRow(ctx, q.updateOrderStmt, updateOrder, arg.PickupAt, arg.UpdatedAt, arg.RiderorderID)
	var i Rideorder
	err := row.Scan(
		&i.RideorderID,
		&i.ContactID,
		&i.RiderName,
		&i.RiderPhone,
		&i.Destination,
		&i.PickupAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
